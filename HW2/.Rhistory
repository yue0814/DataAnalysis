shapiro.test(residuals(model8))
cooks.distance(fitted(model8))
cooks.distance(model8)
plot(cooks.distance(model8))
abline(y=1)
abline(h=1)
plot(cooks.distance(model8))
outlierTest(model8)
y <- rnorm(100, mean = 10, sd=2)
x <- rnorm(100, mean = 3, sd=1)
model_B <- lm(y~x)
summary(model_B)[[4]][2,4]
p_values <- c()
for (i in c(1:1000)){
y <- rnorm(100, mean = 10, sd=2)
x <- rnorm(100, mean = 3, sd=1)
model_B1 <- lm(y~x)
p_values <- c(p_values,summary(model_B1)[[4]][2,4])
}
sum(p_values<0.05)/1000
p_values2 <- c()
for (i in 1:1000){
y <- rep(0, 100)
x <- rnorm(100,mean = 3,sd=1)
for (j in 1:100){
y[j] <- rnorm(1, x[j]+10,1)
}
model_B2 <- lm(y~x)
p_values2 <- c(p_values2, summary(model_B2)[[4]][2,4])
}
sum(p_values2<0.05)/1000
library(MASS)
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1,2,3),diag(3))
p_values3 <- c()
for (i in 1:1000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1,2,3),diag(3))
model_B3 <- lm(y~X)
p_values3 <- rbind(p_values3, summary(model_B3)$coefficients[-1,4])
}
sum(p_values3[,1] <0.05)
sum(p_values3[,2] <0.05)
sum(p_values3[,3] <0.05)
sum(apply(p_values3,1,min)<0.05)/1000
sum(apply(p_values3,1,min)<0.05)
significant <- c()
for (n in c(3,5,10,20,50,90)){
p_values4 <- c()
for (i in 1:1000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1:n),diag(n))
model_B4 <- lm(y~X)
p_values4 <- rbind(p_values4, summary(model_B4)$coefficients[-1,4])
}
significant <- c(significant, sum(apply(p_values4,1,min)<0.05))
}
p_values3
sum(p_values3[,1] <0.05)
sum(p_values3[,2] <0.05)
sum(p_values3[,3] <0.05)
apply(p_values3,1,min)
apply(p_values3,2,min)
sum(apply(p_values3,1,min)<0.05)
48+52+46
11/1000
plot(x=c(3,5,10,20,50,90), y=significant)
significant2 <- c()
for (n in c(1:99)){
p_values5 <- c()
for (i in 1:1000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1:n),diag(n))
model_B5 <- lm(y~X)
p_values5 <- rbind(p_values5, summary(model_B5)$coefficients[-1,4])
}
significant2 <- c(significant2, sum(apply(p_values5,1,min)<0.05))
}
plot(x=c(1:99), y=significant2)
significant2 <- c()
for (n in c(1:99)){
p_values5 <- c()
for (i in 1:3000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1:n),diag(n))
model_B5 <- lm(y~X)
p_values5 <- rbind(p_values5, summary(model_B5)$coefficients[-1,4])
}
significant2 <- c(significant2, sum(apply(p_values5,1,min)<0.05))
}
1-(0.95)^50
1-(0.95)^3
plot(x=c(1:99), y=significant2)
significant2
p_values3 <- c()
for (i in 1:1000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1,2,3),diag(3))
model_B3 <- lm(y~X)
p_values3 <- rbind(p_values3, summary(model_B3)$coefficients[-1,4])
}
sum(p_values3[,1] <0.05)
sum(p_values3[,2] <0.05)
sum(p_values3[,3] <0.05)
sum(apply(p_values3,1,min)<0.05)
set.seed(1)
p_values3 <- c()
for (i in 1:1000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1,2,3),diag(3))
model_B3 <- lm(y~X)
p_values3 <- rbind(p_values3, summary(model_B3)$coefficients[-1,4])
}
sum(p_values3[,1] <0.05)
sum(p_values3[,2] <0.05)
sum(p_values3[,3] <0.05)
sum(apply(p_values3,1,min)<0.05)
set.seed(2)
p_values3 <- c()
for (i in 1:1000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1,2,3),diag(3))
model_B3 <- lm(y~X)
p_values3 <- rbind(p_values3, summary(model_B3)$coefficients[-1,4])
}
sum(p_values3[,1] <0.05)
sum(p_values3[,2] <0.05)
sum(p_values3[,3] <0.05)
sum(apply(p_values3,1,min)<0.05)
set.seed(3)
p_values3 <- c()
for (i in 1:1000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1,2,3),diag(3))
model_B3 <- lm(y~X)
p_values3 <- rbind(p_values3, summary(model_B3)$coefficients[-1,4])
}
sum(p_values3[,1] <0.05)
sum(p_values3[,2] <0.05)
sum(p_values3[,3] <0.05)
sum(apply(p_values3,1,min)<0.05)
set.seed(4)
p_values3 <- c()
for (i in 1:1000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1,2,3),diag(3))
model_B3 <- lm(y~X)
p_values3 <- rbind(p_values3, summary(model_B3)$coefficients[-1,4])
}
sum(p_values3[,1] <0.05)
sum(p_values3[,2] <0.05)
sum(p_values3[,3] <0.05)
sum(apply(p_values3,1,min)<0.05)
1-(0.95)^3
1-(0.95)^5
1-(0.95)^10
1-(0.95)^50
1-(0.95)^90
significant2 <- c()
for (n in c(1:200)){
p_values5 <- c()
for (i in 1:2000){
y <- rnorm(100,10,4)
X <- mvrnorm(n=100,c(1:n),diag(n))
model_B5 <- lm(y~X)
p_values5 <- rbind(p_values5, summary(model_B5)$coefficients[-1,4])
}
significant2 <- c(significant2, sum(apply(p_values5,1,min)<0.05))
}
setwd("D:/Google Drive/RA/DECAMP/Code")
dat <- read.csv("Imaging feature data for Yue 20171003.csv",stringsAsFactors=FALSE)
train <- dat[,3:100]
for (i in 1:98){
if (!is.numeric(train[,i])){
train[,i] <- as.numeric(train[,i])
}
}
train <- na.omit(train)
plot(x=c(1:200), y=significant2)
library(lattice)
library(latticeExtra)
x  <- (as.matrix(scale(train)))
dd.row <- as.dendrogram(hclust(dist(x)))
row.ord <- order.dendrogram(dd.row)
dd.col <- as.dendrogram(hclust(dist(t(x))))
col.ord <- order.dendrogram(dd.col)
library(lattice)
library(latticeExtra)
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 10)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",size=10
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 15)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",size=10
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 10)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",size=15
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 10)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",size=15
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 10)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",size=8
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 10)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",size=4
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 20)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",size=20
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 9)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",size=9
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 9)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top"
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 10
)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top"
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right"
)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top"
))))
train[,1]
train
rownames(train)
rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "lab")
rgb.palette <- colorRampPalette(c("blue", "yellow"), space = "Lab")
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left",col.regions=rgb.palette(120)),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right"
)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top"
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
at=seq(min(psticorr), max(psticorr), length.out=120),
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right"
)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top"
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
at=seq(min(x), max(x), length.out=120),
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right"
)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top"
))))
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 10
)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",
size = 10
))))
x  <- t(as.matrix(scale(train)))
dd.row <- as.dendrogram(hclust(dist(x)))
row.ord <- order.dendrogram(dd.row)
dd.col <- as.dendrogram(hclust(dist(t(x))))
col.ord <- order.dendrogram(dd.col)
levelplot(x[row.ord, col.ord],
aspect = "fill",
xlab="features",
ylab="cases",
scales = list(x = list(rot = 90)),
colorkey = list(space = "left"),
legend =
list(right =
list(fun = dendrogramGrob,
args =
list(x = dd.col, ord = col.ord,
side = "right",
size = 10
)),
top =
list(fun = dendrogramGrob,
args =
list(x = dd.row,
side = "top",
size = 10
))))
setwd("D:/Google Drive/Fall2017/PHP2550/HW2")
save(significant2,file="s2.RData")
plot(x=c(1:200), y=significant2)
