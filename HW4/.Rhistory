}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
0.9405232-0.001745852
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
0.9412171-0.001530992
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
0.9383633-0.001738689
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
0.9316383-0.002642395
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
0.9413711-0.00159477
dod <- read.csv("D:/Dropbox (Brown)/RA/NLST/Ziling/Data/DOD_NoduleMetrics.csv")
dod <- dod[,1:87]
table(dod$Histology)
dod$Group <- rep(1,727)
dod$Group[which(dod$Histology=="NLST_CONTROL")] <- 0
table(dod$Group)
dod_sub <- dod[,c(1,4:23,33:34,44:73,83:88)] # 57 variables to explore
## This is for AUC analysis features table (Table 3), tables were not created directly from the code but the all the results in the table were from the code
### remove ID 516 & 534 which are outliers
dod_sub <- dod_sub[-c(270,516,534),]
library(glmnet)
library(e1071)
library(caTools)
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~Flatness+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~Flatness+SILA_Tex+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
dod_sub$ID <- seq(1,724)
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
final.2 <- glm(Group~SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
final.2 <- glm(Group~Flatness+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~Flatness+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~Flatness+SILA_Tex+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
final.2 <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=dod_sub,family="binomial")
summary(final.2)
car::vif(final.2)
pred.prob.cl <- predict(final.2,type="response")
dod_sub$prob <- pred.prob.cl
library("pROC")
roc.cl.2 <- roc(Group~prob,data=dod_sub)
roc.cl.2$auc
B <- 1000
n <- nrow(dod_sub)
auc.2 <- matrix(NA,1000,2)
for (i in 1:B){
set.seed(2017+i)
boot.samp <- dod_sub[sample(1:n,size=n,replace=T),]
final <- glm(Group~Flatness+SILA_Tex+Avg_PosMeanCurv+Max_SI+Avg_SI+Centroid_Z+Min.Enclosing.Brick+Min_MeanCurv,data=boot.samp,family="binomial")
pred.prob <- predict(final,type="response")
boot.samp$prob <- pred.prob
combine <- merge(dod_sub,boot.samp,by="ID")
auc.2[i,1] <- roc(Group.y~prob.y,data=combine)$auc
auc.2[i,2] <- roc(Group.x~prob.x,data=combine)$auc
}
mean(auc.2[,1])-mean(auc.2[,2]) # 0.002
mean(auc.2[,1]) # 0.943
mean(auc.2[,2]) # 0.941
0.9412522-0.001937556
install.packages("lmerTest")
# Homework 4
# Read the dataset
setwd("D:/Dropbox (Brown)/Fall2017/PHP2550/HW4")
dat <- read.table("wells.txt", sep = " ", header = T)
# switch is a binary indicator for whether the household switched wells
dat$switch <- as.factor(dat$switch)
# assoc is whether household members are active in community organizations
dat$assoc <- as.factor(dat$assoc)
# educ is the number of years of education of the head of household.
str(dat)
# Separate into train and test set
train_dat <- dat[1:2520,]
test_dat <- dat[2521:3020, ]
model <- glm(switch ~ -1 + arsenic +  educ * dist, family = binomial(link = logit), data = train_dat)
summary(model)
anova(m2,model,test = "Chisq")
# f
# LDA
library(MASS)
mlda0 <- lda(switch ~ -1 + arsenic +  educ * dist, train_dat)
confusion.matrix(test_dat$switch, predict(mlda0, test_dat)$class, threshold = 0.5)
# e
library(SDMTools)
confusion.matrix(test_dat$switch, predict(mlda0, test_dat)$class, threshold = 0.5)
table(predict(mlda0, test_dat)$class, test_dat$switch)
pred_lda <- predict(mlda0, test_dat)
table(predict(mlda0, test_dat)$class, test_dat$switch)
confusion.matrix(test_dat$switch, pred_lda$class, threshold = 0.5)
table(pred_lda$class, test_dat$switch)
confusion.matrix(test_dat$switch, pred_lda$class, threshold = 0.5)
pred_lda$posterior
pred_lda$posterior[,2]
#QDA
mqda0 <- qda(switch ~ -1 + arsenic +  educ * dist, train_dat
#QDA
mqda0 <- qda(switch ~ -1 + arsenic +  educ * dist, train_dat)
#QDA
mqda0 <- qda(switch ~ -1 + arsenic +  educ * dist, train_dat)
library(class)
plotROC
library(ROCR)
install.packages("ROCR")
performance(pred_lda, "tpr", "fpr")
library(ROCR)
performance(pred_lda, "tpr", "fpr")
pred_lda$posterior
range(pred_lda$posterior[,2])
pred_roc_lda <- prediction(prob_lda, test_dat$switch)
prob_lda <- pred_lda$posterior[,2]
pred_roc_lda <- prediction(prob_lda, test_dat$switch)
pred_roc_lda
perf_roc_lda <- performance(pred_roc_lda, "tpr", "fpr")
plot(perf_roc_lda)
table(pred_lda$class, test_dat$switch)
plot(perf_roc_lda,main="RUC Plot for LDA", colorize=TRUE)
prob_lda <- predict(mlda0, test_dat)$posterior[,2]
pred_lda <- prediction(prob_lda, test_dat$switch)
perf_lda <- performance(pred_lda, "tpr", "fpr")
plot(perf_lda,main="RUC Plot for LDA", colorize=TRUE)
table(pred_lda$class, test_dat$switch)
mlda0_fit <- predict(mlda0, test_dat)
table(mlda0_fit$class, test_dat$switch)
mqda0_fit <- predict(mqda0, test_dat)
prob_qda <- predict(mqda0, test_dat)$posterior[,2]
pred_qda <- prediction(prob_qda, test_dat$switch)
perf_qda <- performance(pred_qda, "tpr", "fpr")
plot(perf_lda,main="RUC Plot for QDA", colorize=TRUE)
table(mqda0_fit$class, test_dat$switch)
plot(perf_lda,main="RUC Plot for LDA", colorize=TRUE)
plot(perf_lda,main="RUC Plot for QDA", colorize=TRUE)
performance(pred_lda, "auc")@y.values
performance(pred_qda, "auc")@y.values
218/(218+16)
45/(45+221)
218+45/(218+16+221+45)
(218+45)/(218+16+221+45)
1-0.526
220/(220+14)
41/(225+41)
(220+41/(220+14+225+41)
)
(220+41)/(220+14+225+41)
1-0.522
p_ts <- sum(dat$switch==1)/dim(dat)[1]
risk <- function(p){
cm <- confusion.matrix(test_dat$switch, prob_lda, threshold = p)
sen <- sensitivity(cm)
spe <- specificity(cm)
return(p_ts*(1-sen)+(1-p_ts)*(1-spe))
}
x3 <- seq(0,1, length.out = 1000)
y <- mapply(risk, x3)
plot(x3, y, xlab = "Threshold", ylab = "Risk")
# Threshold with least risk
min(y)
threshold <-x3[which.min(y)]
threshold
cm1 <- confusion.matrix(test_dat$switch, pred_lda, threshold = threshold)
pred_lda
pred_lda$class
cm1 <- confusion.matrix(test_dat$switch, mlda0_fit$class, threshold = threshold)
sensitivity(cm1)
specificity(cm1)
threshold
risk <- function(p){
cm <- confusion.matrix(test_dat$switch, prob_qda, threshold = p)
sen <- sensitivity(cm)
spe <- specificity(cm)
return(p_ts*(1-sen)+(1-p_ts)*(1-spe))
}
x4 <- seq(0,1, length.out = 1000)
y <- mapply(risk, x4)
plot(x4, y, xlab = "Threshold", ylab = "Risk")
# Threshold with least risk
min(y)
threshold <-x4[which.min(y)]
threshold
cm2 <- confusion.matrix(test_dat$switch, mqda0_fit$class, threshold = threshold)
sensitivity(cm2)
specificity(cm2)
cm2 <- confusion.matrix(test_dat$switch, prob_qda, threshold = threshold)
sensitivity(cm2)
specificity(cm2)
risk <- function(p){
cm <- confusion.matrix(test_dat$switch, prob_lda, threshold = p)
sen <- sensitivity(cm)
spe <- specificity(cm)
return(p_ts*(1-sen)+(1-p_ts)*(1-spe))
}
x3 <- seq(0,1, length.out = 1000)
y <- mapply(risk, x3)
plot(x3, y, xlab = "Threshold", ylab = "Risk")
# Threshold with least risk
min(y)
threshold <-x3[which.min(y)]
threshold
cm1 <- confusion.matrix(test_dat$switch, prob_lda, threshold = threshold)
sensitivity(cm1)
specificity(cm1)
# KNN
mknn0 <- knn(train = train_dat, test = test_dat, k=1)
# KNN
mknn0 <- knn(train = train_dat, test = test_dat,cl=train_dat$switch, k=1)
mknn0
mknn0[[1]]
mknn0[[2]]
mknn0[[3]]
mknn0[2
]
mknn0[1]
prediction(mknn0$y, test_dat$switch)
prediction(mknn0$switch, test_dat$switch)
# KNN
mknn0 <- knn(train = train_dat, test = test_dat,cl=train_dat$switch, k=1, prob = T)
mknn0$y
mknn0$swith
mknn0$swicth
mknn0$switch
mknn0$prob
mknn0
library(pROC)
# KNN
mknn0 <- knn(train = train_dat, test = test_dat,cl=train_dat$switch, k=1)
multiclass.roc(response=test_dat$switch, predictor = as.ordered(knn0))
multiclass.roc(response=test_dat$switch, predictor = as.ordered(mknn0))
table(mknn0, test_dat$switch)
multiclass.roc(response=test_dat$switch, predictor = as.ordered(mknn0))
208/(208+26)
215/(215+51)
208+215/(208+215+51+26)
(208+215)/(208+215+51+26)
1-0.846
mknn1 <- knn(train = train_dat, test = test_dat,cl=train_dat$switch, k=5)
table(mknn1, test_dat$switch)
multiclass.roc(response=test_dat$switch, predictor = as.ordered(mknn1))
212/(212+22)
188/(188+78)
(212+188)/(212+188+78+22)
